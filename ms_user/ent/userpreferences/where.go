// Code generated by ent, DO NOT EDIT.

package userpreferences

import (
	"demo/ms_user/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldLTE(FieldID, id))
}

// Theme applies equality check predicate on the "theme" field. It's identical to ThemeEQ.
func Theme(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEQ(FieldTheme, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEQ(FieldLanguage, v))
}

// Timezone applies equality check predicate on the "timezone" field. It's identical to TimezoneEQ.
func Timezone(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEQ(FieldTimezone, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEQ(FieldUpdatedAt, v))
}

// ThemeEQ applies the EQ predicate on the "theme" field.
func ThemeEQ(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEQ(FieldTheme, v))
}

// ThemeNEQ applies the NEQ predicate on the "theme" field.
func ThemeNEQ(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNEQ(FieldTheme, v))
}

// ThemeIn applies the In predicate on the "theme" field.
func ThemeIn(vs ...string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldIn(FieldTheme, vs...))
}

// ThemeNotIn applies the NotIn predicate on the "theme" field.
func ThemeNotIn(vs ...string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNotIn(FieldTheme, vs...))
}

// ThemeGT applies the GT predicate on the "theme" field.
func ThemeGT(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldGT(FieldTheme, v))
}

// ThemeGTE applies the GTE predicate on the "theme" field.
func ThemeGTE(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldGTE(FieldTheme, v))
}

// ThemeLT applies the LT predicate on the "theme" field.
func ThemeLT(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldLT(FieldTheme, v))
}

// ThemeLTE applies the LTE predicate on the "theme" field.
func ThemeLTE(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldLTE(FieldTheme, v))
}

// ThemeContains applies the Contains predicate on the "theme" field.
func ThemeContains(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldContains(FieldTheme, v))
}

// ThemeHasPrefix applies the HasPrefix predicate on the "theme" field.
func ThemeHasPrefix(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldHasPrefix(FieldTheme, v))
}

// ThemeHasSuffix applies the HasSuffix predicate on the "theme" field.
func ThemeHasSuffix(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldHasSuffix(FieldTheme, v))
}

// ThemeEqualFold applies the EqualFold predicate on the "theme" field.
func ThemeEqualFold(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEqualFold(FieldTheme, v))
}

// ThemeContainsFold applies the ContainsFold predicate on the "theme" field.
func ThemeContainsFold(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldContainsFold(FieldTheme, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldContainsFold(FieldLanguage, v))
}

// TimezoneEQ applies the EQ predicate on the "timezone" field.
func TimezoneEQ(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEQ(FieldTimezone, v))
}

// TimezoneNEQ applies the NEQ predicate on the "timezone" field.
func TimezoneNEQ(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNEQ(FieldTimezone, v))
}

// TimezoneIn applies the In predicate on the "timezone" field.
func TimezoneIn(vs ...string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldIn(FieldTimezone, vs...))
}

// TimezoneNotIn applies the NotIn predicate on the "timezone" field.
func TimezoneNotIn(vs ...string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNotIn(FieldTimezone, vs...))
}

// TimezoneGT applies the GT predicate on the "timezone" field.
func TimezoneGT(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldGT(FieldTimezone, v))
}

// TimezoneGTE applies the GTE predicate on the "timezone" field.
func TimezoneGTE(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldGTE(FieldTimezone, v))
}

// TimezoneLT applies the LT predicate on the "timezone" field.
func TimezoneLT(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldLT(FieldTimezone, v))
}

// TimezoneLTE applies the LTE predicate on the "timezone" field.
func TimezoneLTE(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldLTE(FieldTimezone, v))
}

// TimezoneContains applies the Contains predicate on the "timezone" field.
func TimezoneContains(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldContains(FieldTimezone, v))
}

// TimezoneHasPrefix applies the HasPrefix predicate on the "timezone" field.
func TimezoneHasPrefix(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldHasPrefix(FieldTimezone, v))
}

// TimezoneHasSuffix applies the HasSuffix predicate on the "timezone" field.
func TimezoneHasSuffix(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldHasSuffix(FieldTimezone, v))
}

// TimezoneIsNil applies the IsNil predicate on the "timezone" field.
func TimezoneIsNil() predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldIsNull(FieldTimezone))
}

// TimezoneNotNil applies the NotNil predicate on the "timezone" field.
func TimezoneNotNil() predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNotNull(FieldTimezone))
}

// TimezoneEqualFold applies the EqualFold predicate on the "timezone" field.
func TimezoneEqualFold(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEqualFold(FieldTimezone, v))
}

// TimezoneContainsFold applies the ContainsFold predicate on the "timezone" field.
func TimezoneContainsFold(v string) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldContainsFold(FieldTimezone, v))
}

// CanvasSettingsIsNil applies the IsNil predicate on the "canvas_settings" field.
func CanvasSettingsIsNil() predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldIsNull(FieldCanvasSettings))
}

// CanvasSettingsNotNil applies the NotNil predicate on the "canvas_settings" field.
func CanvasSettingsNotNil() predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNotNull(FieldCanvasSettings))
}

// NotificationSettingsIsNil applies the IsNil predicate on the "notification_settings" field.
func NotificationSettingsIsNil() predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldIsNull(FieldNotificationSettings))
}

// NotificationSettingsNotNil applies the NotNil predicate on the "notification_settings" field.
func NotificationSettingsNotNil() predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNotNull(FieldNotificationSettings))
}

// AccessibilitySettingsIsNil applies the IsNil predicate on the "accessibility_settings" field.
func AccessibilitySettingsIsNil() predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldIsNull(FieldAccessibilitySettings))
}

// AccessibilitySettingsNotNil applies the NotNil predicate on the "accessibility_settings" field.
func AccessibilitySettingsNotNil() predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNotNull(FieldAccessibilitySettings))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserPreferences {
	return predicate.UserPreferences(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserPreferences {
	return predicate.UserPreferences(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserPreferences {
	return predicate.UserPreferences(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserPreferences) predicate.UserPreferences {
	return predicate.UserPreferences(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserPreferences) predicate.UserPreferences {
	return predicate.UserPreferences(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserPreferences) predicate.UserPreferences {
	return predicate.UserPreferences(sql.NotPredicates(p))
}
