// Code generated by ent, DO NOT EDIT.

package ent

import (
	"demo/ms_user/ent/user"
	"demo/ms_user/ent/userpreferences"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// UserPreferences is the model entity for the UserPreferences schema.
type UserPreferences struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Theme holds the value of the "theme" field.
	Theme string `json:"theme,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// Timezone holds the value of the "timezone" field.
	Timezone string `json:"timezone,omitempty"`
	// CanvasSettings holds the value of the "canvas_settings" field.
	CanvasSettings map[string]interface{} `json:"canvas_settings,omitempty"`
	// NotificationSettings holds the value of the "notification_settings" field.
	NotificationSettings map[string]interface{} `json:"notification_settings,omitempty"`
	// AccessibilitySettings holds the value of the "accessibility_settings" field.
	AccessibilitySettings map[string]interface{} `json:"accessibility_settings,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserPreferencesQuery when eager-loading is set.
	Edges            UserPreferencesEdges `json:"edges"`
	user_preferences *uuid.UUID
	selectValues     sql.SelectValues
}

// UserPreferencesEdges holds the relations/edges for other nodes in the graph.
type UserPreferencesEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserPreferencesEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserPreferences) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userpreferences.FieldCanvasSettings, userpreferences.FieldNotificationSettings, userpreferences.FieldAccessibilitySettings:
			values[i] = new([]byte)
		case userpreferences.FieldTheme, userpreferences.FieldLanguage, userpreferences.FieldTimezone:
			values[i] = new(sql.NullString)
		case userpreferences.FieldCreatedAt, userpreferences.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case userpreferences.FieldID:
			values[i] = new(uuid.UUID)
		case userpreferences.ForeignKeys[0]: // user_preferences
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserPreferences fields.
func (up *UserPreferences) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userpreferences.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				up.ID = *value
			}
		case userpreferences.FieldTheme:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field theme", values[i])
			} else if value.Valid {
				up.Theme = value.String
			}
		case userpreferences.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				up.Language = value.String
			}
		case userpreferences.FieldTimezone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone", values[i])
			} else if value.Valid {
				up.Timezone = value.String
			}
		case userpreferences.FieldCanvasSettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field canvas_settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &up.CanvasSettings); err != nil {
					return fmt.Errorf("unmarshal field canvas_settings: %w", err)
				}
			}
		case userpreferences.FieldNotificationSettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field notification_settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &up.NotificationSettings); err != nil {
					return fmt.Errorf("unmarshal field notification_settings: %w", err)
				}
			}
		case userpreferences.FieldAccessibilitySettings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field accessibility_settings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &up.AccessibilitySettings); err != nil {
					return fmt.Errorf("unmarshal field accessibility_settings: %w", err)
				}
			}
		case userpreferences.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				up.CreatedAt = value.Time
			}
		case userpreferences.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				up.UpdatedAt = value.Time
			}
		case userpreferences.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_preferences", values[i])
			} else if value.Valid {
				up.user_preferences = new(uuid.UUID)
				*up.user_preferences = *value.S.(*uuid.UUID)
			}
		default:
			up.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserPreferences.
// This includes values selected through modifiers, order, etc.
func (up *UserPreferences) Value(name string) (ent.Value, error) {
	return up.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserPreferences entity.
func (up *UserPreferences) QueryUser() *UserQuery {
	return NewUserPreferencesClient(up.config).QueryUser(up)
}

// Update returns a builder for updating this UserPreferences.
// Note that you need to call UserPreferences.Unwrap() before calling this method if this UserPreferences
// was returned from a transaction, and the transaction was committed or rolled back.
func (up *UserPreferences) Update() *UserPreferencesUpdateOne {
	return NewUserPreferencesClient(up.config).UpdateOne(up)
}

// Unwrap unwraps the UserPreferences entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (up *UserPreferences) Unwrap() *UserPreferences {
	_tx, ok := up.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserPreferences is not a transactional entity")
	}
	up.config.driver = _tx.drv
	return up
}

// String implements the fmt.Stringer.
func (up *UserPreferences) String() string {
	var builder strings.Builder
	builder.WriteString("UserPreferences(")
	builder.WriteString(fmt.Sprintf("id=%v, ", up.ID))
	builder.WriteString("theme=")
	builder.WriteString(up.Theme)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(up.Language)
	builder.WriteString(", ")
	builder.WriteString("timezone=")
	builder.WriteString(up.Timezone)
	builder.WriteString(", ")
	builder.WriteString("canvas_settings=")
	builder.WriteString(fmt.Sprintf("%v", up.CanvasSettings))
	builder.WriteString(", ")
	builder.WriteString("notification_settings=")
	builder.WriteString(fmt.Sprintf("%v", up.NotificationSettings))
	builder.WriteString(", ")
	builder.WriteString("accessibility_settings=")
	builder.WriteString(fmt.Sprintf("%v", up.AccessibilitySettings))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(up.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(up.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserPreferencesSlice is a parsable slice of UserPreferences.
type UserPreferencesSlice []*UserPreferences
