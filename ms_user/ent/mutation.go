// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"demo/ms_user/ent/predicate"
	"demo/ms_user/ent/user"
	"demo/ms_user/ent/userpreferences"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser            = "User"
	TypeUserPreferences = "UserPreferences"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	clerk_user_id          *string
	email                  *string
	full_name              *string
	username               *string
	profile_picture_url    *string
	storage_used_bytes     *int64
	addstorage_used_bytes  *int64
	storage_quota_bytes    *int64
	addstorage_quota_bytes *int64
	status                 *string
	created_at             *time.Time
	updated_at             *time.Time
	deleted_at             *time.Time
	clearedFields          map[string]struct{}
	preferences            *uuid.UUID
	clearedpreferences     bool
	done                   bool
	oldValue               func(context.Context) (*User, error)
	predicates             []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetClerkUserID sets the "clerk_user_id" field.
func (m *UserMutation) SetClerkUserID(s string) {
	m.clerk_user_id = &s
}

// ClerkUserID returns the value of the "clerk_user_id" field in the mutation.
func (m *UserMutation) ClerkUserID() (r string, exists bool) {
	v := m.clerk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClerkUserID returns the old "clerk_user_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldClerkUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClerkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClerkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClerkUserID: %w", err)
	}
	return oldValue.ClerkUserID, nil
}

// ResetClerkUserID resets all changes to the "clerk_user_id" field.
func (m *UserMutation) ResetClerkUserID() {
	m.clerk_user_id = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetFullName sets the "full_name" field.
func (m *UserMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *UserMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *UserMutation) ResetFullName() {
	m.full_name = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *UserMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[user.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *UserMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[user.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, user.FieldUsername)
}

// SetProfilePictureURL sets the "profile_picture_url" field.
func (m *UserMutation) SetProfilePictureURL(s string) {
	m.profile_picture_url = &s
}

// ProfilePictureURL returns the value of the "profile_picture_url" field in the mutation.
func (m *UserMutation) ProfilePictureURL() (r string, exists bool) {
	v := m.profile_picture_url
	if v == nil {
		return
	}
	return *v, true
}

// OldProfilePictureURL returns the old "profile_picture_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldProfilePictureURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfilePictureURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfilePictureURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfilePictureURL: %w", err)
	}
	return oldValue.ProfilePictureURL, nil
}

// ClearProfilePictureURL clears the value of the "profile_picture_url" field.
func (m *UserMutation) ClearProfilePictureURL() {
	m.profile_picture_url = nil
	m.clearedFields[user.FieldProfilePictureURL] = struct{}{}
}

// ProfilePictureURLCleared returns if the "profile_picture_url" field was cleared in this mutation.
func (m *UserMutation) ProfilePictureURLCleared() bool {
	_, ok := m.clearedFields[user.FieldProfilePictureURL]
	return ok
}

// ResetProfilePictureURL resets all changes to the "profile_picture_url" field.
func (m *UserMutation) ResetProfilePictureURL() {
	m.profile_picture_url = nil
	delete(m.clearedFields, user.FieldProfilePictureURL)
}

// SetStorageUsedBytes sets the "storage_used_bytes" field.
func (m *UserMutation) SetStorageUsedBytes(i int64) {
	m.storage_used_bytes = &i
	m.addstorage_used_bytes = nil
}

// StorageUsedBytes returns the value of the "storage_used_bytes" field in the mutation.
func (m *UserMutation) StorageUsedBytes() (r int64, exists bool) {
	v := m.storage_used_bytes
	if v == nil {
		return
	}
	return *v, true
}

// OldStorageUsedBytes returns the old "storage_used_bytes" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStorageUsedBytes(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStorageUsedBytes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStorageUsedBytes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStorageUsedBytes: %w", err)
	}
	return oldValue.StorageUsedBytes, nil
}

// AddStorageUsedBytes adds i to the "storage_used_bytes" field.
func (m *UserMutation) AddStorageUsedBytes(i int64) {
	if m.addstorage_used_bytes != nil {
		*m.addstorage_used_bytes += i
	} else {
		m.addstorage_used_bytes = &i
	}
}

// AddedStorageUsedBytes returns the value that was added to the "storage_used_bytes" field in this mutation.
func (m *UserMutation) AddedStorageUsedBytes() (r int64, exists bool) {
	v := m.addstorage_used_bytes
	if v == nil {
		return
	}
	return *v, true
}

// ResetStorageUsedBytes resets all changes to the "storage_used_bytes" field.
func (m *UserMutation) ResetStorageUsedBytes() {
	m.storage_used_bytes = nil
	m.addstorage_used_bytes = nil
}

// SetStorageQuotaBytes sets the "storage_quota_bytes" field.
func (m *UserMutation) SetStorageQuotaBytes(i int64) {
	m.storage_quota_bytes = &i
	m.addstorage_quota_bytes = nil
}

// StorageQuotaBytes returns the value of the "storage_quota_bytes" field in the mutation.
func (m *UserMutation) StorageQuotaBytes() (r int64, exists bool) {
	v := m.storage_quota_bytes
	if v == nil {
		return
	}
	return *v, true
}

// OldStorageQuotaBytes returns the old "storage_quota_bytes" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStorageQuotaBytes(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStorageQuotaBytes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStorageQuotaBytes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStorageQuotaBytes: %w", err)
	}
	return oldValue.StorageQuotaBytes, nil
}

// AddStorageQuotaBytes adds i to the "storage_quota_bytes" field.
func (m *UserMutation) AddStorageQuotaBytes(i int64) {
	if m.addstorage_quota_bytes != nil {
		*m.addstorage_quota_bytes += i
	} else {
		m.addstorage_quota_bytes = &i
	}
}

// AddedStorageQuotaBytes returns the value that was added to the "storage_quota_bytes" field in this mutation.
func (m *UserMutation) AddedStorageQuotaBytes() (r int64, exists bool) {
	v := m.addstorage_quota_bytes
	if v == nil {
		return
	}
	return *v, true
}

// ResetStorageQuotaBytes resets all changes to the "storage_quota_bytes" field.
func (m *UserMutation) ResetStorageQuotaBytes() {
	m.storage_quota_bytes = nil
	m.addstorage_quota_bytes = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// SetPreferencesID sets the "preferences" edge to the UserPreferences entity by id.
func (m *UserMutation) SetPreferencesID(id uuid.UUID) {
	m.preferences = &id
}

// ClearPreferences clears the "preferences" edge to the UserPreferences entity.
func (m *UserMutation) ClearPreferences() {
	m.clearedpreferences = true
}

// PreferencesCleared reports if the "preferences" edge to the UserPreferences entity was cleared.
func (m *UserMutation) PreferencesCleared() bool {
	return m.clearedpreferences
}

// PreferencesID returns the "preferences" edge ID in the mutation.
func (m *UserMutation) PreferencesID() (id uuid.UUID, exists bool) {
	if m.preferences != nil {
		return *m.preferences, true
	}
	return
}

// PreferencesIDs returns the "preferences" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PreferencesID instead. It exists only for internal usage by the builders.
func (m *UserMutation) PreferencesIDs() (ids []uuid.UUID) {
	if id := m.preferences; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPreferences resets all changes to the "preferences" edge.
func (m *UserMutation) ResetPreferences() {
	m.preferences = nil
	m.clearedpreferences = false
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.clerk_user_id != nil {
		fields = append(fields, user.FieldClerkUserID)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.full_name != nil {
		fields = append(fields, user.FieldFullName)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.profile_picture_url != nil {
		fields = append(fields, user.FieldProfilePictureURL)
	}
	if m.storage_used_bytes != nil {
		fields = append(fields, user.FieldStorageUsedBytes)
	}
	if m.storage_quota_bytes != nil {
		fields = append(fields, user.FieldStorageQuotaBytes)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldClerkUserID:
		return m.ClerkUserID()
	case user.FieldEmail:
		return m.Email()
	case user.FieldFullName:
		return m.FullName()
	case user.FieldUsername:
		return m.Username()
	case user.FieldProfilePictureURL:
		return m.ProfilePictureURL()
	case user.FieldStorageUsedBytes:
		return m.StorageUsedBytes()
	case user.FieldStorageQuotaBytes:
		return m.StorageQuotaBytes()
	case user.FieldStatus:
		return m.Status()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldClerkUserID:
		return m.OldClerkUserID(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldFullName:
		return m.OldFullName(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldProfilePictureURL:
		return m.OldProfilePictureURL(ctx)
	case user.FieldStorageUsedBytes:
		return m.OldStorageUsedBytes(ctx)
	case user.FieldStorageQuotaBytes:
		return m.OldStorageQuotaBytes(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldClerkUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClerkUserID(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldProfilePictureURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfilePictureURL(v)
		return nil
	case user.FieldStorageUsedBytes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStorageUsedBytes(v)
		return nil
	case user.FieldStorageQuotaBytes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStorageQuotaBytes(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addstorage_used_bytes != nil {
		fields = append(fields, user.FieldStorageUsedBytes)
	}
	if m.addstorage_quota_bytes != nil {
		fields = append(fields, user.FieldStorageQuotaBytes)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldStorageUsedBytes:
		return m.AddedStorageUsedBytes()
	case user.FieldStorageQuotaBytes:
		return m.AddedStorageQuotaBytes()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldStorageUsedBytes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStorageUsedBytes(v)
		return nil
	case user.FieldStorageQuotaBytes:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStorageQuotaBytes(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldUsername) {
		fields = append(fields, user.FieldUsername)
	}
	if m.FieldCleared(user.FieldProfilePictureURL) {
		fields = append(fields, user.FieldProfilePictureURL)
	}
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ClearUsername()
		return nil
	case user.FieldProfilePictureURL:
		m.ClearProfilePictureURL()
		return nil
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldClerkUserID:
		m.ResetClerkUserID()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldFullName:
		m.ResetFullName()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldProfilePictureURL:
		m.ResetProfilePictureURL()
		return nil
	case user.FieldStorageUsedBytes:
		m.ResetStorageUsedBytes()
		return nil
	case user.FieldStorageQuotaBytes:
		m.ResetStorageQuotaBytes()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.preferences != nil {
		edges = append(edges, user.EdgePreferences)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePreferences:
		if id := m.preferences; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpreferences {
		edges = append(edges, user.EdgePreferences)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePreferences:
		return m.clearedpreferences
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgePreferences:
		m.ClearPreferences()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePreferences:
		m.ResetPreferences()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserPreferencesMutation represents an operation that mutates the UserPreferences nodes in the graph.
type UserPreferencesMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	theme                  *string
	language               *string
	timezone               *string
	canvas_settings        *map[string]interface{}
	notification_settings  *map[string]interface{}
	accessibility_settings *map[string]interface{}
	created_at             *time.Time
	updated_at             *time.Time
	clearedFields          map[string]struct{}
	user                   *uuid.UUID
	cleareduser            bool
	done                   bool
	oldValue               func(context.Context) (*UserPreferences, error)
	predicates             []predicate.UserPreferences
}

var _ ent.Mutation = (*UserPreferencesMutation)(nil)

// userpreferencesOption allows management of the mutation configuration using functional options.
type userpreferencesOption func(*UserPreferencesMutation)

// newUserPreferencesMutation creates new mutation for the UserPreferences entity.
func newUserPreferencesMutation(c config, op Op, opts ...userpreferencesOption) *UserPreferencesMutation {
	m := &UserPreferencesMutation{
		config:        c,
		op:            op,
		typ:           TypeUserPreferences,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserPreferencesID sets the ID field of the mutation.
func withUserPreferencesID(id uuid.UUID) userpreferencesOption {
	return func(m *UserPreferencesMutation) {
		var (
			err   error
			once  sync.Once
			value *UserPreferences
		)
		m.oldValue = func(ctx context.Context) (*UserPreferences, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserPreferences.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserPreferences sets the old UserPreferences of the mutation.
func withUserPreferences(node *UserPreferences) userpreferencesOption {
	return func(m *UserPreferencesMutation) {
		m.oldValue = func(context.Context) (*UserPreferences, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserPreferencesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserPreferencesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserPreferences entities.
func (m *UserPreferencesMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserPreferencesMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserPreferencesMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserPreferences.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTheme sets the "theme" field.
func (m *UserPreferencesMutation) SetTheme(s string) {
	m.theme = &s
}

// Theme returns the value of the "theme" field in the mutation.
func (m *UserPreferencesMutation) Theme() (r string, exists bool) {
	v := m.theme
	if v == nil {
		return
	}
	return *v, true
}

// OldTheme returns the old "theme" field's value of the UserPreferences entity.
// If the UserPreferences object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPreferencesMutation) OldTheme(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTheme is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTheme requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTheme: %w", err)
	}
	return oldValue.Theme, nil
}

// ResetTheme resets all changes to the "theme" field.
func (m *UserPreferencesMutation) ResetTheme() {
	m.theme = nil
}

// SetLanguage sets the "language" field.
func (m *UserPreferencesMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *UserPreferencesMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the UserPreferences entity.
// If the UserPreferences object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPreferencesMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *UserPreferencesMutation) ResetLanguage() {
	m.language = nil
}

// SetTimezone sets the "timezone" field.
func (m *UserPreferencesMutation) SetTimezone(s string) {
	m.timezone = &s
}

// Timezone returns the value of the "timezone" field in the mutation.
func (m *UserPreferencesMutation) Timezone() (r string, exists bool) {
	v := m.timezone
	if v == nil {
		return
	}
	return *v, true
}

// OldTimezone returns the old "timezone" field's value of the UserPreferences entity.
// If the UserPreferences object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPreferencesMutation) OldTimezone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimezone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimezone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimezone: %w", err)
	}
	return oldValue.Timezone, nil
}

// ClearTimezone clears the value of the "timezone" field.
func (m *UserPreferencesMutation) ClearTimezone() {
	m.timezone = nil
	m.clearedFields[userpreferences.FieldTimezone] = struct{}{}
}

// TimezoneCleared returns if the "timezone" field was cleared in this mutation.
func (m *UserPreferencesMutation) TimezoneCleared() bool {
	_, ok := m.clearedFields[userpreferences.FieldTimezone]
	return ok
}

// ResetTimezone resets all changes to the "timezone" field.
func (m *UserPreferencesMutation) ResetTimezone() {
	m.timezone = nil
	delete(m.clearedFields, userpreferences.FieldTimezone)
}

// SetCanvasSettings sets the "canvas_settings" field.
func (m *UserPreferencesMutation) SetCanvasSettings(value map[string]interface{}) {
	m.canvas_settings = &value
}

// CanvasSettings returns the value of the "canvas_settings" field in the mutation.
func (m *UserPreferencesMutation) CanvasSettings() (r map[string]interface{}, exists bool) {
	v := m.canvas_settings
	if v == nil {
		return
	}
	return *v, true
}

// OldCanvasSettings returns the old "canvas_settings" field's value of the UserPreferences entity.
// If the UserPreferences object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPreferencesMutation) OldCanvasSettings(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCanvasSettings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCanvasSettings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCanvasSettings: %w", err)
	}
	return oldValue.CanvasSettings, nil
}

// ClearCanvasSettings clears the value of the "canvas_settings" field.
func (m *UserPreferencesMutation) ClearCanvasSettings() {
	m.canvas_settings = nil
	m.clearedFields[userpreferences.FieldCanvasSettings] = struct{}{}
}

// CanvasSettingsCleared returns if the "canvas_settings" field was cleared in this mutation.
func (m *UserPreferencesMutation) CanvasSettingsCleared() bool {
	_, ok := m.clearedFields[userpreferences.FieldCanvasSettings]
	return ok
}

// ResetCanvasSettings resets all changes to the "canvas_settings" field.
func (m *UserPreferencesMutation) ResetCanvasSettings() {
	m.canvas_settings = nil
	delete(m.clearedFields, userpreferences.FieldCanvasSettings)
}

// SetNotificationSettings sets the "notification_settings" field.
func (m *UserPreferencesMutation) SetNotificationSettings(value map[string]interface{}) {
	m.notification_settings = &value
}

// NotificationSettings returns the value of the "notification_settings" field in the mutation.
func (m *UserPreferencesMutation) NotificationSettings() (r map[string]interface{}, exists bool) {
	v := m.notification_settings
	if v == nil {
		return
	}
	return *v, true
}

// OldNotificationSettings returns the old "notification_settings" field's value of the UserPreferences entity.
// If the UserPreferences object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPreferencesMutation) OldNotificationSettings(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotificationSettings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotificationSettings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotificationSettings: %w", err)
	}
	return oldValue.NotificationSettings, nil
}

// ClearNotificationSettings clears the value of the "notification_settings" field.
func (m *UserPreferencesMutation) ClearNotificationSettings() {
	m.notification_settings = nil
	m.clearedFields[userpreferences.FieldNotificationSettings] = struct{}{}
}

// NotificationSettingsCleared returns if the "notification_settings" field was cleared in this mutation.
func (m *UserPreferencesMutation) NotificationSettingsCleared() bool {
	_, ok := m.clearedFields[userpreferences.FieldNotificationSettings]
	return ok
}

// ResetNotificationSettings resets all changes to the "notification_settings" field.
func (m *UserPreferencesMutation) ResetNotificationSettings() {
	m.notification_settings = nil
	delete(m.clearedFields, userpreferences.FieldNotificationSettings)
}

// SetAccessibilitySettings sets the "accessibility_settings" field.
func (m *UserPreferencesMutation) SetAccessibilitySettings(value map[string]interface{}) {
	m.accessibility_settings = &value
}

// AccessibilitySettings returns the value of the "accessibility_settings" field in the mutation.
func (m *UserPreferencesMutation) AccessibilitySettings() (r map[string]interface{}, exists bool) {
	v := m.accessibility_settings
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessibilitySettings returns the old "accessibility_settings" field's value of the UserPreferences entity.
// If the UserPreferences object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPreferencesMutation) OldAccessibilitySettings(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessibilitySettings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessibilitySettings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessibilitySettings: %w", err)
	}
	return oldValue.AccessibilitySettings, nil
}

// ClearAccessibilitySettings clears the value of the "accessibility_settings" field.
func (m *UserPreferencesMutation) ClearAccessibilitySettings() {
	m.accessibility_settings = nil
	m.clearedFields[userpreferences.FieldAccessibilitySettings] = struct{}{}
}

// AccessibilitySettingsCleared returns if the "accessibility_settings" field was cleared in this mutation.
func (m *UserPreferencesMutation) AccessibilitySettingsCleared() bool {
	_, ok := m.clearedFields[userpreferences.FieldAccessibilitySettings]
	return ok
}

// ResetAccessibilitySettings resets all changes to the "accessibility_settings" field.
func (m *UserPreferencesMutation) ResetAccessibilitySettings() {
	m.accessibility_settings = nil
	delete(m.clearedFields, userpreferences.FieldAccessibilitySettings)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserPreferencesMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserPreferencesMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserPreferences entity.
// If the UserPreferences object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPreferencesMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserPreferencesMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserPreferencesMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserPreferencesMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserPreferences entity.
// If the UserPreferences object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPreferencesMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserPreferencesMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *UserPreferencesMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserPreferencesMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserPreferencesMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *UserPreferencesMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserPreferencesMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserPreferencesMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the UserPreferencesMutation builder.
func (m *UserPreferencesMutation) Where(ps ...predicate.UserPreferences) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserPreferencesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserPreferencesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserPreferences, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserPreferencesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserPreferencesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserPreferences).
func (m *UserPreferencesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserPreferencesMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.theme != nil {
		fields = append(fields, userpreferences.FieldTheme)
	}
	if m.language != nil {
		fields = append(fields, userpreferences.FieldLanguage)
	}
	if m.timezone != nil {
		fields = append(fields, userpreferences.FieldTimezone)
	}
	if m.canvas_settings != nil {
		fields = append(fields, userpreferences.FieldCanvasSettings)
	}
	if m.notification_settings != nil {
		fields = append(fields, userpreferences.FieldNotificationSettings)
	}
	if m.accessibility_settings != nil {
		fields = append(fields, userpreferences.FieldAccessibilitySettings)
	}
	if m.created_at != nil {
		fields = append(fields, userpreferences.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, userpreferences.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserPreferencesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userpreferences.FieldTheme:
		return m.Theme()
	case userpreferences.FieldLanguage:
		return m.Language()
	case userpreferences.FieldTimezone:
		return m.Timezone()
	case userpreferences.FieldCanvasSettings:
		return m.CanvasSettings()
	case userpreferences.FieldNotificationSettings:
		return m.NotificationSettings()
	case userpreferences.FieldAccessibilitySettings:
		return m.AccessibilitySettings()
	case userpreferences.FieldCreatedAt:
		return m.CreatedAt()
	case userpreferences.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserPreferencesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userpreferences.FieldTheme:
		return m.OldTheme(ctx)
	case userpreferences.FieldLanguage:
		return m.OldLanguage(ctx)
	case userpreferences.FieldTimezone:
		return m.OldTimezone(ctx)
	case userpreferences.FieldCanvasSettings:
		return m.OldCanvasSettings(ctx)
	case userpreferences.FieldNotificationSettings:
		return m.OldNotificationSettings(ctx)
	case userpreferences.FieldAccessibilitySettings:
		return m.OldAccessibilitySettings(ctx)
	case userpreferences.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case userpreferences.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserPreferences field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPreferencesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userpreferences.FieldTheme:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTheme(v)
		return nil
	case userpreferences.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case userpreferences.FieldTimezone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimezone(v)
		return nil
	case userpreferences.FieldCanvasSettings:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCanvasSettings(v)
		return nil
	case userpreferences.FieldNotificationSettings:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotificationSettings(v)
		return nil
	case userpreferences.FieldAccessibilitySettings:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessibilitySettings(v)
		return nil
	case userpreferences.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case userpreferences.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserPreferences field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserPreferencesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserPreferencesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPreferencesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserPreferences numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserPreferencesMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(userpreferences.FieldTimezone) {
		fields = append(fields, userpreferences.FieldTimezone)
	}
	if m.FieldCleared(userpreferences.FieldCanvasSettings) {
		fields = append(fields, userpreferences.FieldCanvasSettings)
	}
	if m.FieldCleared(userpreferences.FieldNotificationSettings) {
		fields = append(fields, userpreferences.FieldNotificationSettings)
	}
	if m.FieldCleared(userpreferences.FieldAccessibilitySettings) {
		fields = append(fields, userpreferences.FieldAccessibilitySettings)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserPreferencesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserPreferencesMutation) ClearField(name string) error {
	switch name {
	case userpreferences.FieldTimezone:
		m.ClearTimezone()
		return nil
	case userpreferences.FieldCanvasSettings:
		m.ClearCanvasSettings()
		return nil
	case userpreferences.FieldNotificationSettings:
		m.ClearNotificationSettings()
		return nil
	case userpreferences.FieldAccessibilitySettings:
		m.ClearAccessibilitySettings()
		return nil
	}
	return fmt.Errorf("unknown UserPreferences nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserPreferencesMutation) ResetField(name string) error {
	switch name {
	case userpreferences.FieldTheme:
		m.ResetTheme()
		return nil
	case userpreferences.FieldLanguage:
		m.ResetLanguage()
		return nil
	case userpreferences.FieldTimezone:
		m.ResetTimezone()
		return nil
	case userpreferences.FieldCanvasSettings:
		m.ResetCanvasSettings()
		return nil
	case userpreferences.FieldNotificationSettings:
		m.ResetNotificationSettings()
		return nil
	case userpreferences.FieldAccessibilitySettings:
		m.ResetAccessibilitySettings()
		return nil
	case userpreferences.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case userpreferences.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserPreferences field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserPreferencesMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, userpreferences.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserPreferencesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userpreferences.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserPreferencesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserPreferencesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserPreferencesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, userpreferences.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserPreferencesMutation) EdgeCleared(name string) bool {
	switch name {
	case userpreferences.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserPreferencesMutation) ClearEdge(name string) error {
	switch name {
	case userpreferences.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserPreferences unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserPreferencesMutation) ResetEdge(name string) error {
	switch name {
	case userpreferences.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserPreferences edge %s", name)
}
