// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"demo/ms_user/ent/user"
	"demo/ms_user/ent/userpreferences"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserPreferencesCreate is the builder for creating a UserPreferences entity.
type UserPreferencesCreate struct {
	config
	mutation *UserPreferencesMutation
	hooks    []Hook
}

// SetTheme sets the "theme" field.
func (upc *UserPreferencesCreate) SetTheme(s string) *UserPreferencesCreate {
	upc.mutation.SetTheme(s)
	return upc
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (upc *UserPreferencesCreate) SetNillableTheme(s *string) *UserPreferencesCreate {
	if s != nil {
		upc.SetTheme(*s)
	}
	return upc
}

// SetLanguage sets the "language" field.
func (upc *UserPreferencesCreate) SetLanguage(s string) *UserPreferencesCreate {
	upc.mutation.SetLanguage(s)
	return upc
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (upc *UserPreferencesCreate) SetNillableLanguage(s *string) *UserPreferencesCreate {
	if s != nil {
		upc.SetLanguage(*s)
	}
	return upc
}

// SetTimezone sets the "timezone" field.
func (upc *UserPreferencesCreate) SetTimezone(s string) *UserPreferencesCreate {
	upc.mutation.SetTimezone(s)
	return upc
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (upc *UserPreferencesCreate) SetNillableTimezone(s *string) *UserPreferencesCreate {
	if s != nil {
		upc.SetTimezone(*s)
	}
	return upc
}

// SetCanvasSettings sets the "canvas_settings" field.
func (upc *UserPreferencesCreate) SetCanvasSettings(m map[string]interface{}) *UserPreferencesCreate {
	upc.mutation.SetCanvasSettings(m)
	return upc
}

// SetNotificationSettings sets the "notification_settings" field.
func (upc *UserPreferencesCreate) SetNotificationSettings(m map[string]interface{}) *UserPreferencesCreate {
	upc.mutation.SetNotificationSettings(m)
	return upc
}

// SetAccessibilitySettings sets the "accessibility_settings" field.
func (upc *UserPreferencesCreate) SetAccessibilitySettings(m map[string]interface{}) *UserPreferencesCreate {
	upc.mutation.SetAccessibilitySettings(m)
	return upc
}

// SetCreatedAt sets the "created_at" field.
func (upc *UserPreferencesCreate) SetCreatedAt(t time.Time) *UserPreferencesCreate {
	upc.mutation.SetCreatedAt(t)
	return upc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upc *UserPreferencesCreate) SetNillableCreatedAt(t *time.Time) *UserPreferencesCreate {
	if t != nil {
		upc.SetCreatedAt(*t)
	}
	return upc
}

// SetUpdatedAt sets the "updated_at" field.
func (upc *UserPreferencesCreate) SetUpdatedAt(t time.Time) *UserPreferencesCreate {
	upc.mutation.SetUpdatedAt(t)
	return upc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (upc *UserPreferencesCreate) SetNillableUpdatedAt(t *time.Time) *UserPreferencesCreate {
	if t != nil {
		upc.SetUpdatedAt(*t)
	}
	return upc
}

// SetID sets the "id" field.
func (upc *UserPreferencesCreate) SetID(u uuid.UUID) *UserPreferencesCreate {
	upc.mutation.SetID(u)
	return upc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (upc *UserPreferencesCreate) SetNillableID(u *uuid.UUID) *UserPreferencesCreate {
	if u != nil {
		upc.SetID(*u)
	}
	return upc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (upc *UserPreferencesCreate) SetUserID(id uuid.UUID) *UserPreferencesCreate {
	upc.mutation.SetUserID(id)
	return upc
}

// SetUser sets the "user" edge to the User entity.
func (upc *UserPreferencesCreate) SetUser(u *User) *UserPreferencesCreate {
	return upc.SetUserID(u.ID)
}

// Mutation returns the UserPreferencesMutation object of the builder.
func (upc *UserPreferencesCreate) Mutation() *UserPreferencesMutation {
	return upc.mutation
}

// Save creates the UserPreferences in the database.
func (upc *UserPreferencesCreate) Save(ctx context.Context) (*UserPreferences, error) {
	upc.defaults()
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserPreferencesCreate) SaveX(ctx context.Context) *UserPreferences {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserPreferencesCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserPreferencesCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upc *UserPreferencesCreate) defaults() {
	if _, ok := upc.mutation.Theme(); !ok {
		v := userpreferences.DefaultTheme
		upc.mutation.SetTheme(v)
	}
	if _, ok := upc.mutation.Language(); !ok {
		v := userpreferences.DefaultLanguage
		upc.mutation.SetLanguage(v)
	}
	if _, ok := upc.mutation.CreatedAt(); !ok {
		v := userpreferences.DefaultCreatedAt()
		upc.mutation.SetCreatedAt(v)
	}
	if _, ok := upc.mutation.UpdatedAt(); !ok {
		v := userpreferences.DefaultUpdatedAt()
		upc.mutation.SetUpdatedAt(v)
	}
	if _, ok := upc.mutation.ID(); !ok {
		v := userpreferences.DefaultID()
		upc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserPreferencesCreate) check() error {
	if _, ok := upc.mutation.Theme(); !ok {
		return &ValidationError{Name: "theme", err: errors.New(`ent: missing required field "UserPreferences.theme"`)}
	}
	if _, ok := upc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "UserPreferences.language"`)}
	}
	if _, ok := upc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserPreferences.created_at"`)}
	}
	if _, ok := upc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserPreferences.updated_at"`)}
	}
	if len(upc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserPreferences.user"`)}
	}
	return nil
}

func (upc *UserPreferencesCreate) sqlSave(ctx context.Context) (*UserPreferences, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserPreferencesCreate) createSpec() (*UserPreferences, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPreferences{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userpreferences.Table, sqlgraph.NewFieldSpec(userpreferences.FieldID, field.TypeUUID))
	)
	if id, ok := upc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := upc.mutation.Theme(); ok {
		_spec.SetField(userpreferences.FieldTheme, field.TypeString, value)
		_node.Theme = value
	}
	if value, ok := upc.mutation.Language(); ok {
		_spec.SetField(userpreferences.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := upc.mutation.Timezone(); ok {
		_spec.SetField(userpreferences.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := upc.mutation.CanvasSettings(); ok {
		_spec.SetField(userpreferences.FieldCanvasSettings, field.TypeJSON, value)
		_node.CanvasSettings = value
	}
	if value, ok := upc.mutation.NotificationSettings(); ok {
		_spec.SetField(userpreferences.FieldNotificationSettings, field.TypeJSON, value)
		_node.NotificationSettings = value
	}
	if value, ok := upc.mutation.AccessibilitySettings(); ok {
		_spec.SetField(userpreferences.FieldAccessibilitySettings, field.TypeJSON, value)
		_node.AccessibilitySettings = value
	}
	if value, ok := upc.mutation.CreatedAt(); ok {
		_spec.SetField(userpreferences.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := upc.mutation.UpdatedAt(); ok {
		_spec.SetField(userpreferences.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := upc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpreferences.UserTable,
			Columns: []string{userpreferences.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_preferences = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserPreferencesCreateBulk is the builder for creating many UserPreferences entities in bulk.
type UserPreferencesCreateBulk struct {
	config
	err      error
	builders []*UserPreferencesCreate
}

// Save creates the UserPreferences entities in the database.
func (upcb *UserPreferencesCreateBulk) Save(ctx context.Context) ([]*UserPreferences, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserPreferences, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPreferencesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserPreferencesCreateBulk) SaveX(ctx context.Context) []*UserPreferences {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserPreferencesCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserPreferencesCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}
