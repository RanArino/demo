// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"demo/ms_user/ent/predicate"
	"demo/ms_user/ent/user"
	"demo/ms_user/ent/userpreferences"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserPreferencesUpdate is the builder for updating UserPreferences entities.
type UserPreferencesUpdate struct {
	config
	hooks    []Hook
	mutation *UserPreferencesMutation
}

// Where appends a list predicates to the UserPreferencesUpdate builder.
func (upu *UserPreferencesUpdate) Where(ps ...predicate.UserPreferences) *UserPreferencesUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetTheme sets the "theme" field.
func (upu *UserPreferencesUpdate) SetTheme(s string) *UserPreferencesUpdate {
	upu.mutation.SetTheme(s)
	return upu
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (upu *UserPreferencesUpdate) SetNillableTheme(s *string) *UserPreferencesUpdate {
	if s != nil {
		upu.SetTheme(*s)
	}
	return upu
}

// SetLanguage sets the "language" field.
func (upu *UserPreferencesUpdate) SetLanguage(s string) *UserPreferencesUpdate {
	upu.mutation.SetLanguage(s)
	return upu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (upu *UserPreferencesUpdate) SetNillableLanguage(s *string) *UserPreferencesUpdate {
	if s != nil {
		upu.SetLanguage(*s)
	}
	return upu
}

// SetTimezone sets the "timezone" field.
func (upu *UserPreferencesUpdate) SetTimezone(s string) *UserPreferencesUpdate {
	upu.mutation.SetTimezone(s)
	return upu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (upu *UserPreferencesUpdate) SetNillableTimezone(s *string) *UserPreferencesUpdate {
	if s != nil {
		upu.SetTimezone(*s)
	}
	return upu
}

// ClearTimezone clears the value of the "timezone" field.
func (upu *UserPreferencesUpdate) ClearTimezone() *UserPreferencesUpdate {
	upu.mutation.ClearTimezone()
	return upu
}

// SetCanvasSettings sets the "canvas_settings" field.
func (upu *UserPreferencesUpdate) SetCanvasSettings(m map[string]interface{}) *UserPreferencesUpdate {
	upu.mutation.SetCanvasSettings(m)
	return upu
}

// ClearCanvasSettings clears the value of the "canvas_settings" field.
func (upu *UserPreferencesUpdate) ClearCanvasSettings() *UserPreferencesUpdate {
	upu.mutation.ClearCanvasSettings()
	return upu
}

// SetNotificationSettings sets the "notification_settings" field.
func (upu *UserPreferencesUpdate) SetNotificationSettings(m map[string]interface{}) *UserPreferencesUpdate {
	upu.mutation.SetNotificationSettings(m)
	return upu
}

// ClearNotificationSettings clears the value of the "notification_settings" field.
func (upu *UserPreferencesUpdate) ClearNotificationSettings() *UserPreferencesUpdate {
	upu.mutation.ClearNotificationSettings()
	return upu
}

// SetAccessibilitySettings sets the "accessibility_settings" field.
func (upu *UserPreferencesUpdate) SetAccessibilitySettings(m map[string]interface{}) *UserPreferencesUpdate {
	upu.mutation.SetAccessibilitySettings(m)
	return upu
}

// ClearAccessibilitySettings clears the value of the "accessibility_settings" field.
func (upu *UserPreferencesUpdate) ClearAccessibilitySettings() *UserPreferencesUpdate {
	upu.mutation.ClearAccessibilitySettings()
	return upu
}

// SetUpdatedAt sets the "updated_at" field.
func (upu *UserPreferencesUpdate) SetUpdatedAt(t time.Time) *UserPreferencesUpdate {
	upu.mutation.SetUpdatedAt(t)
	return upu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (upu *UserPreferencesUpdate) SetUserID(id uuid.UUID) *UserPreferencesUpdate {
	upu.mutation.SetUserID(id)
	return upu
}

// SetUser sets the "user" edge to the User entity.
func (upu *UserPreferencesUpdate) SetUser(u *User) *UserPreferencesUpdate {
	return upu.SetUserID(u.ID)
}

// Mutation returns the UserPreferencesMutation object of the builder.
func (upu *UserPreferencesUpdate) Mutation() *UserPreferencesMutation {
	return upu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upu *UserPreferencesUpdate) ClearUser() *UserPreferencesUpdate {
	upu.mutation.ClearUser()
	return upu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPreferencesUpdate) Save(ctx context.Context) (int, error) {
	upu.defaults()
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPreferencesUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPreferencesUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPreferencesUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upu *UserPreferencesUpdate) defaults() {
	if _, ok := upu.mutation.UpdatedAt(); !ok {
		v := userpreferences.UpdateDefaultUpdatedAt()
		upu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upu *UserPreferencesUpdate) check() error {
	if upu.mutation.UserCleared() && len(upu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPreferences.user"`)
	}
	return nil
}

func (upu *UserPreferencesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpreferences.Table, userpreferences.Columns, sqlgraph.NewFieldSpec(userpreferences.FieldID, field.TypeUUID))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.Theme(); ok {
		_spec.SetField(userpreferences.FieldTheme, field.TypeString, value)
	}
	if value, ok := upu.mutation.Language(); ok {
		_spec.SetField(userpreferences.FieldLanguage, field.TypeString, value)
	}
	if value, ok := upu.mutation.Timezone(); ok {
		_spec.SetField(userpreferences.FieldTimezone, field.TypeString, value)
	}
	if upu.mutation.TimezoneCleared() {
		_spec.ClearField(userpreferences.FieldTimezone, field.TypeString)
	}
	if value, ok := upu.mutation.CanvasSettings(); ok {
		_spec.SetField(userpreferences.FieldCanvasSettings, field.TypeJSON, value)
	}
	if upu.mutation.CanvasSettingsCleared() {
		_spec.ClearField(userpreferences.FieldCanvasSettings, field.TypeJSON)
	}
	if value, ok := upu.mutation.NotificationSettings(); ok {
		_spec.SetField(userpreferences.FieldNotificationSettings, field.TypeJSON, value)
	}
	if upu.mutation.NotificationSettingsCleared() {
		_spec.ClearField(userpreferences.FieldNotificationSettings, field.TypeJSON)
	}
	if value, ok := upu.mutation.AccessibilitySettings(); ok {
		_spec.SetField(userpreferences.FieldAccessibilitySettings, field.TypeJSON, value)
	}
	if upu.mutation.AccessibilitySettingsCleared() {
		_spec.ClearField(userpreferences.FieldAccessibilitySettings, field.TypeJSON)
	}
	if value, ok := upu.mutation.UpdatedAt(); ok {
		_spec.SetField(userpreferences.FieldUpdatedAt, field.TypeTime, value)
	}
	if upu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpreferences.UserTable,
			Columns: []string{userpreferences.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpreferences.UserTable,
			Columns: []string{userpreferences.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpreferences.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserPreferencesUpdateOne is the builder for updating a single UserPreferences entity.
type UserPreferencesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPreferencesMutation
}

// SetTheme sets the "theme" field.
func (upuo *UserPreferencesUpdateOne) SetTheme(s string) *UserPreferencesUpdateOne {
	upuo.mutation.SetTheme(s)
	return upuo
}

// SetNillableTheme sets the "theme" field if the given value is not nil.
func (upuo *UserPreferencesUpdateOne) SetNillableTheme(s *string) *UserPreferencesUpdateOne {
	if s != nil {
		upuo.SetTheme(*s)
	}
	return upuo
}

// SetLanguage sets the "language" field.
func (upuo *UserPreferencesUpdateOne) SetLanguage(s string) *UserPreferencesUpdateOne {
	upuo.mutation.SetLanguage(s)
	return upuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (upuo *UserPreferencesUpdateOne) SetNillableLanguage(s *string) *UserPreferencesUpdateOne {
	if s != nil {
		upuo.SetLanguage(*s)
	}
	return upuo
}

// SetTimezone sets the "timezone" field.
func (upuo *UserPreferencesUpdateOne) SetTimezone(s string) *UserPreferencesUpdateOne {
	upuo.mutation.SetTimezone(s)
	return upuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (upuo *UserPreferencesUpdateOne) SetNillableTimezone(s *string) *UserPreferencesUpdateOne {
	if s != nil {
		upuo.SetTimezone(*s)
	}
	return upuo
}

// ClearTimezone clears the value of the "timezone" field.
func (upuo *UserPreferencesUpdateOne) ClearTimezone() *UserPreferencesUpdateOne {
	upuo.mutation.ClearTimezone()
	return upuo
}

// SetCanvasSettings sets the "canvas_settings" field.
func (upuo *UserPreferencesUpdateOne) SetCanvasSettings(m map[string]interface{}) *UserPreferencesUpdateOne {
	upuo.mutation.SetCanvasSettings(m)
	return upuo
}

// ClearCanvasSettings clears the value of the "canvas_settings" field.
func (upuo *UserPreferencesUpdateOne) ClearCanvasSettings() *UserPreferencesUpdateOne {
	upuo.mutation.ClearCanvasSettings()
	return upuo
}

// SetNotificationSettings sets the "notification_settings" field.
func (upuo *UserPreferencesUpdateOne) SetNotificationSettings(m map[string]interface{}) *UserPreferencesUpdateOne {
	upuo.mutation.SetNotificationSettings(m)
	return upuo
}

// ClearNotificationSettings clears the value of the "notification_settings" field.
func (upuo *UserPreferencesUpdateOne) ClearNotificationSettings() *UserPreferencesUpdateOne {
	upuo.mutation.ClearNotificationSettings()
	return upuo
}

// SetAccessibilitySettings sets the "accessibility_settings" field.
func (upuo *UserPreferencesUpdateOne) SetAccessibilitySettings(m map[string]interface{}) *UserPreferencesUpdateOne {
	upuo.mutation.SetAccessibilitySettings(m)
	return upuo
}

// ClearAccessibilitySettings clears the value of the "accessibility_settings" field.
func (upuo *UserPreferencesUpdateOne) ClearAccessibilitySettings() *UserPreferencesUpdateOne {
	upuo.mutation.ClearAccessibilitySettings()
	return upuo
}

// SetUpdatedAt sets the "updated_at" field.
func (upuo *UserPreferencesUpdateOne) SetUpdatedAt(t time.Time) *UserPreferencesUpdateOne {
	upuo.mutation.SetUpdatedAt(t)
	return upuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (upuo *UserPreferencesUpdateOne) SetUserID(id uuid.UUID) *UserPreferencesUpdateOne {
	upuo.mutation.SetUserID(id)
	return upuo
}

// SetUser sets the "user" edge to the User entity.
func (upuo *UserPreferencesUpdateOne) SetUser(u *User) *UserPreferencesUpdateOne {
	return upuo.SetUserID(u.ID)
}

// Mutation returns the UserPreferencesMutation object of the builder.
func (upuo *UserPreferencesUpdateOne) Mutation() *UserPreferencesMutation {
	return upuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upuo *UserPreferencesUpdateOne) ClearUser() *UserPreferencesUpdateOne {
	upuo.mutation.ClearUser()
	return upuo
}

// Where appends a list predicates to the UserPreferencesUpdate builder.
func (upuo *UserPreferencesUpdateOne) Where(ps ...predicate.UserPreferences) *UserPreferencesUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPreferencesUpdateOne) Select(field string, fields ...string) *UserPreferencesUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPreferences entity.
func (upuo *UserPreferencesUpdateOne) Save(ctx context.Context) (*UserPreferences, error) {
	upuo.defaults()
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPreferencesUpdateOne) SaveX(ctx context.Context) *UserPreferences {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPreferencesUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPreferencesUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (upuo *UserPreferencesUpdateOne) defaults() {
	if _, ok := upuo.mutation.UpdatedAt(); !ok {
		v := userpreferences.UpdateDefaultUpdatedAt()
		upuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upuo *UserPreferencesUpdateOne) check() error {
	if upuo.mutation.UserCleared() && len(upuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPreferences.user"`)
	}
	return nil
}

func (upuo *UserPreferencesUpdateOne) sqlSave(ctx context.Context) (_node *UserPreferences, err error) {
	if err := upuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpreferences.Table, userpreferences.Columns, sqlgraph.NewFieldSpec(userpreferences.FieldID, field.TypeUUID))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPreferences.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpreferences.FieldID)
		for _, f := range fields {
			if !userpreferences.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpreferences.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.Theme(); ok {
		_spec.SetField(userpreferences.FieldTheme, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Language(); ok {
		_spec.SetField(userpreferences.FieldLanguage, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Timezone(); ok {
		_spec.SetField(userpreferences.FieldTimezone, field.TypeString, value)
	}
	if upuo.mutation.TimezoneCleared() {
		_spec.ClearField(userpreferences.FieldTimezone, field.TypeString)
	}
	if value, ok := upuo.mutation.CanvasSettings(); ok {
		_spec.SetField(userpreferences.FieldCanvasSettings, field.TypeJSON, value)
	}
	if upuo.mutation.CanvasSettingsCleared() {
		_spec.ClearField(userpreferences.FieldCanvasSettings, field.TypeJSON)
	}
	if value, ok := upuo.mutation.NotificationSettings(); ok {
		_spec.SetField(userpreferences.FieldNotificationSettings, field.TypeJSON, value)
	}
	if upuo.mutation.NotificationSettingsCleared() {
		_spec.ClearField(userpreferences.FieldNotificationSettings, field.TypeJSON)
	}
	if value, ok := upuo.mutation.AccessibilitySettings(); ok {
		_spec.SetField(userpreferences.FieldAccessibilitySettings, field.TypeJSON, value)
	}
	if upuo.mutation.AccessibilitySettingsCleared() {
		_spec.ClearField(userpreferences.FieldAccessibilitySettings, field.TypeJSON)
	}
	if value, ok := upuo.mutation.UpdatedAt(); ok {
		_spec.SetField(userpreferences.FieldUpdatedAt, field.TypeTime, value)
	}
	if upuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpreferences.UserTable,
			Columns: []string{userpreferences.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   userpreferences.UserTable,
			Columns: []string{userpreferences.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPreferences{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpreferences.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
