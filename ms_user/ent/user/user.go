// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClerkUserID holds the string denoting the clerk_user_id field in the database.
	FieldClerkUserID = "clerk_user_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldStorageUsedBytes holds the string denoting the storage_used_bytes field in the database.
	FieldStorageUsedBytes = "storage_used_bytes"
	// FieldStorageQuotaBytes holds the string denoting the storage_quota_bytes field in the database.
	FieldStorageQuotaBytes = "storage_quota_bytes"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgePreferences holds the string denoting the preferences edge name in mutations.
	EdgePreferences = "preferences"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PreferencesTable is the table that holds the preferences relation/edge.
	PreferencesTable = "user_preferences"
	// PreferencesInverseTable is the table name for the UserPreferences entity.
	// It exists in this package in order to avoid circular dependency with the "userpreferences" package.
	PreferencesInverseTable = "user_preferences"
	// PreferencesColumn is the table column denoting the preferences relation/edge.
	PreferencesColumn = "user_preferences"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldClerkUserID,
	FieldEmail,
	FieldFullName,
	FieldUsername,
	FieldStorageUsedBytes,
	FieldStorageQuotaBytes,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStorageUsedBytes holds the default value on creation for the "storage_used_bytes" field.
	DefaultStorageUsedBytes int64
	// DefaultStorageQuotaBytes holds the default value on creation for the "storage_quota_bytes" field.
	DefaultStorageQuotaBytes int64
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClerkUserID orders the results by the clerk_user_id field.
func ByClerkUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClerkUserID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByStorageUsedBytes orders the results by the storage_used_bytes field.
func ByStorageUsedBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorageUsedBytes, opts...).ToFunc()
}

// ByStorageQuotaBytes orders the results by the storage_quota_bytes field.
func ByStorageQuotaBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorageQuotaBytes, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByPreferencesField orders the results by preferences field.
func ByPreferencesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPreferencesStep(), sql.OrderByField(field, opts...))
	}
}
func newPreferencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PreferencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PreferencesTable, PreferencesColumn),
	)
}
